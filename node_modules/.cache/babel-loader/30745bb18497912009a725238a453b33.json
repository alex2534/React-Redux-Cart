{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantaty: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      /*In here we are checking if the item already existis in the cart\n       */\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      /*if the item does not exist in the cart then we add it as a new item\n                   and the only reasen we can use the push method in here is because \n                   we are using the @reactjs/toolkit if it was the redux we couln't use\n                   the push method in here because it would manipulate the state direct */\n\n      state.totalQuantaty++;\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantit: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        }); //if it existis in the cart than we increase the number of  same item in the cart\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    remomveItemFromCart(state, action) {\n      const id = action.payload;\n      /*In here we are checking if the item already existis in the cart\n       */\n\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n        state.totalQuantaty--;\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/alexnascimento/Desktop/React-Redux-side-Efect/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantaty","totalAmount","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","itemId","price","quantit","totalPrice","title","quantity","remomveItemFromCart","filter","cartActions","actions"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAE;AACbC,IAAAA,KAAK,EAAE,EADM;AAEbC,IAAAA,aAAa,EAAE,CAFF;AAGbC,IAAAA,WAAW,EAAE;AAHA,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA;AACH;;AACG,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACA;AACH;AACA;AACA;;AACGP,MAAAA,KAAK,CAACJ,aAAN;;AACA,UAAI,CAACQ,YAAL,EAAmB;AAClBJ,QAAAA,KAAK,CAACL,KAAN,CAAYa,IAAZ,CAAiB;AAChBC,UAAAA,MAAM,EAAEP,OAAO,CAACK,EADA;AAEhBG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFC;AAGhBC,UAAAA,OAAO,EAAE,CAHO;AAIhBC,UAAAA,UAAU,EAAEV,OAAO,CAACQ,KAJJ;AAKhBjB,UAAAA,IAAI,EAAES,OAAO,CAACW;AALE,SAAjB,EADkB,CAQlB;AACA,OATD,MASO;AACNT,QAAAA,YAAY,CAACU,QAAb,GAAwBV,YAAY,CAACU,QAAb,GAAwB,CAAhD;AACAV,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BV,OAAO,CAACQ,KAA5D;AACA;AACD,KAxBQ;;AAyBTK,IAAAA,mBAAmB,CAACf,KAAD,EAAQC,MAAR,EAAgB;AAClC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA;AACH;;AACG,YAAMC,YAAY,GAAGJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;;AACA,UAAIH,YAAY,CAACU,QAAb,KAA0B,CAA9B,EAAiC;AAChCd,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYqB,MAAZ,CAAoBV,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACAP,QAAAA,KAAK,CAACJ,aAAN;AACA,OAHD,MAGO;AACNQ,QAAAA,YAAY,CAACU,QAAb;AACAV,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACM,KAAjE;AACA;AACD;;AArCQ;AAPmB,CAAD,CAA7B;AAgDA,OAAO,MAAMO,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AAEP,eAAe1B,SAAf","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n\tname: \"cart\",\n\tinitialState: {\n\t\titems: [],\n\t\ttotalQuantaty: 0,\n\t\ttotalAmount: 0,\n\t},\n\treducers: {\n\t\taddItemToCart(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\t/*In here we are checking if the item already existis in the cart\n\t\t\t */\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\n\t\t\t/*if the item does not exist in the cart then we add it as a new item\n                and the only reasen we can use the push method in here is because \n                we are using the @reactjs/toolkit if it was the redux we couln't use\n                the push method in here because it would manipulate the state direct */\n\t\t\tstate.totalQuantaty++;\n\t\t\tif (!existingItem) {\n\t\t\t\tstate.items.push({\n\t\t\t\t\titemId: newItem.id,\n\t\t\t\t\tprice: newItem.price,\n\t\t\t\t\tquantit: 1,\n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t\tname: newItem.title,\n\t\t\t\t});\n\t\t\t\t//if it existis in the cart than we increase the number of  same item in the cart\n\t\t\t} else {\n\t\t\t\texistingItem.quantity = existingItem.quantity + 1;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\n\t\t\t}\n\t\t},\n\t\tremomveItemFromCart(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\t/*In here we are checking if the item already existis in the cart\n\t\t\t */\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\n\t\t\tif (existingItem.quantity === 1) {\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\n\t\t\t\tstate.totalQuantaty--;\n\t\t\t} else {\n\t\t\t\texistingItem.quantity--;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n\t\t\t}\n\t\t},\n\t},\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}