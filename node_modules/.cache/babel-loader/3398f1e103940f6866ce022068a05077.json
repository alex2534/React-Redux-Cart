{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      /*In here we are checking if the item already existis in the cart\n       */\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      /*if the item does not exist in the cart then we add it as a new item\n                   and the only reasen we can use the push method in here is because \n                   we are using the @reactjs/toolkit if it was the redux we couln't use\n                   the push method in here because it would manipulate the state direct */\n\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        }); //if it existis in the cart than we increase the number of  same item in the cart\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    remomveItemFromCart(state, action) {\n      const id = action.payload;\n      /*In here we are checking if the item already existis in the cart\n       */\n\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-6ff2e-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    dispatch(uiActions.showNotification({\n      status: \"success\",\n      title: \"Success!\",\n      message: \"Sent cart data successfully!\"\n    }));\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/alexnascimento/Desktop/React-Redux-side-Efect/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","remomveItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","cartActions","actions"],"mappings":"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","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n\tname: \"cart\",\n\tinitialState: {\n\t\titems: [],\n\t\ttotalQuantity: 0,\n\t\ttotalAmount: 0,\n\t},\n\treducers: {\n\t\taddItemToCart(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\t/*In here we are checking if the item already existis in the cart\n\t\t\t */\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\n\t\t\t/*if the item does not exist in the cart then we add it as a new item\n                and the only reasen we can use the push method in here is because \n                we are using the @reactjs/toolkit if it was the redux we couln't use\n                the push method in here because it would manipulate the state direct */\n\t\t\tstate.totalQuantity++;\n\t\t\tif (!existingItem) {\n\t\t\t\tstate.items.push({\n\t\t\t\t\tid: newItem.id,\n\t\t\t\t\tprice: newItem.price,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t\tname: newItem.title,\n\t\t\t\t});\n\t\t\t\t//if it existis in the cart than we increase the number of  same item in the cart\n\t\t\t} else {\n\t\t\t\texistingItem.quantity = existingItem.quantity + 1;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\n\t\t\t}\n\t\t},\n\t\tremomveItemFromCart(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\t/*In here we are checking if the item already existis in the cart\n\t\t\t */\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\n\t\t\tstate.totalQuantity--;\n\t\t\tif (existingItem.quantity === 1) {\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\n\t\t\t} else {\n\t\t\t\texistingItem.quantity--;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n\t\t\t}\n\t\t},\n\t},\n});\n\nconst sendCartData = (cart) => {\n\treturn async (dispatch) => {\n\t\tdispatch(\n\t\t\tuiActions.showNotification({\n\t\t\t\tstatus: \"pending\",\n\t\t\t\ttitle: \"Sending...\",\n\t\t\t\tmessage: \"Sending cart data!\",\n\t\t\t})\n\t\t);\n\n\t\tconst sendRequest = async () => {\n\t\t\tconst response = await fetch(\n\t\t\t\t\"https://react-http-6ff2e-default-rtdb.firebaseio.com/cart.json\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"PUT\",\n\t\t\t\t\tbody: JSON.stringify(cart),\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\"Sending cart data failed.\");\n\t\t\t}\n\t\t};\n\n\t\tdispatch(\n\t\t\tuiActions.showNotification({\n\t\t\t\tstatus: \"success\",\n\t\t\t\ttitle: \"Success!\",\n\t\t\t\tmessage: \"Sent cart data successfully!\",\n\t\t\t})\n\t\t);\n\t};\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}