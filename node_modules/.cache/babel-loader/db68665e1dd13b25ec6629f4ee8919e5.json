{"ast":null,"code":"/** @format */\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0,\n    changed: false\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      /*In here we are checking if the item already existis in the cart\n       */\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      /*if the item does not exist in the cart then we add it as a new item\n                   and the only reasen we can use the push method in here is because \n                   we are using the @reactjs/toolkit if it was the redux we couln't use\n                   the push method in here because it would manipulate the state direct */\n\n      state.totalQuantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        }); //if it existis in the cart than we increase the number of  same item in the cart\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    remomveItemFromCart(state, action) {\n      const id = action.payload;\n      /*In here we are checking if the item already existis in the cart\n       */\n\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/alexnascimento/Desktop/React-Redux-side-Efect/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","totalAmount","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","remomveItemFromCart","filter","cartActions","actions"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAE;AACbC,IAAAA,KAAK,EAAE,EADM;AAEbC,IAAAA,aAAa,EAAE,CAFF;AAGbC,IAAAA,WAAW,EAAE,CAHA;AAIbC,IAAAA,OAAO,EAAE;AAJI,GAFe;AAQ7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACL,aAAN,GAAsBM,MAAM,CAACC,OAAP,CAAeP,aAArC;AACAK,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;AACA,KAJQ;;AAKTS,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA;AACH;;AACG,YAAMG,YAAY,GAAGL,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB;AACA;AACH;AACA;AACA;;AACGR,MAAAA,KAAK,CAACL,aAAN;AACAK,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;;AACA,UAAI,CAACQ,YAAL,EAAmB;AAClBL,QAAAA,KAAK,CAACN,KAAN,CAAYe,IAAZ,CAAiB;AAChBD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADI;AAEhBE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFC;AAGhBC,UAAAA,QAAQ,EAAE,CAHM;AAIhBC,UAAAA,UAAU,EAAER,OAAO,CAACM,KAJJ;AAKhBlB,UAAAA,IAAI,EAAEY,OAAO,CAACS;AALE,SAAjB,EADkB,CAQlB;AACA,OATD,MASO;AACNR,QAAAA,YAAY,CAACM,QAAb,GAAwBN,YAAY,CAACM,QAAb,GAAwB,CAAhD;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BR,OAAO,CAACM,KAA5D;AACA;AACD,KA7BQ;;AA8BTI,IAAAA,mBAAmB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAClC,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA;AACH;;AACG,YAAMG,YAAY,GAAGL,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAR,MAAAA,KAAK,CAACL,aAAN;;AACA,UAAIU,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAChCX,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYqB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACA,OAFD,MAEO;AACNH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACA;AACD;;AA1CQ;AARmB,CAAD,CAA7B;AAsDA,OAAO,MAAMM,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AAEP,eAAe1B,SAAf","sourcesContent":["/** @format */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n\tname: \"cart\",\n\tinitialState: {\n\t\titems: [],\n\t\ttotalQuantity: 0,\n\t\ttotalAmount: 0,\n\t\tchanged: false,\n\t},\n\treducers: {\n\t\treplaceCart(state, action) {\n\t\t\tstate.totalQuantity = action.payload.totalQuantity;\n\t\t\tstate.items = action.payload.items;\n\t\t},\n\t\taddItemToCart(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\t/*In here we are checking if the item already existis in the cart\n\t\t\t */\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\n\t\t\t/*if the item does not exist in the cart then we add it as a new item\n                and the only reasen we can use the push method in here is because \n                we are using the @reactjs/toolkit if it was the redux we couln't use\n                the push method in here because it would manipulate the state direct */\n\t\t\tstate.totalQuantity++;\n\t\t\tstate.changed = true;\n\t\t\tif (!existingItem) {\n\t\t\t\tstate.items.push({\n\t\t\t\t\tid: newItem.id,\n\t\t\t\t\tprice: newItem.price,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t\tname: newItem.title,\n\t\t\t\t});\n\t\t\t\t//if it existis in the cart than we increase the number of  same item in the cart\n\t\t\t} else {\n\t\t\t\texistingItem.quantity = existingItem.quantity + 1;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\n\t\t\t}\n\t\t},\n\t\tremomveItemFromCart(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\t/*In here we are checking if the item already existis in the cart\n\t\t\t */\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\n\t\t\tstate.totalQuantity--;\n\t\t\tif (existingItem.quantity === 1) {\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\n\t\t\t} else {\n\t\t\t\texistingItem.quantity--;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n\t\t\t}\n\t\t},\n\t},\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}